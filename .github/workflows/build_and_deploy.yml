name: Build and Publish Python Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel cython
        shell: bash

      - name: Build and compile modules
        run: |
          python setup.py build_ext --inplace
          python setup.py bdist_wheel
        shell: bash

      - name: Repair Wheels (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          mkdir -p dist_repaired
          docker run --rm -v `pwd`:/io quay.io/pypa/manylinux2014_x86_64 bash -c "\
            shopt -s nullglob; \
            for whl in /io/dist/*linux_x86_64.whl; do \
              echo 'Repairing wheel: ' \$whl; \
              auditwheel repair \$whl --plat manylinux2014_x86_64 -w /io/dist_repaired/; \
              if [ \$? -ne 0 ]; then \
                echo 'Error repairing wheel: ' \$whl; \
                exit 1; \
              fi; \
            done; \
            echo 'Copying repaired wheels'; \
            cp /io/dist_repaired/* /io/dist/"
        shell: bash

      - name: Verify wheel contents
        run: |
          unzip -l dist/*.whl
        shell: bash

      - uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./dist/*.whl

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Download wheels from Artifact Storage
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Unpack Artifacts and Move to Dist
        run: |
          mkdir -p dist
          find ./artifacts -name '*.zip' -exec unzip -o {} -d ./ \;
          find . -name '*.whl' -exec mv {} dist/ \;

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish to PyPI with Verbose Output
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload --verbose dist/*.whl
